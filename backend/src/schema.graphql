type Query {
  currentUser: User!
  categories(query: String): [Category!]!
  category: [Category!]!
  post(postID: ID!): Post!
  posts(
    query: String
    first: Int
    userID: ID
    skip: Int
    after: String
    orderBy: PostOrderByInput
  ): [Post!]!
  comment(commentID: ID!): Comment!
  comments(
    query: String
    first: Int
    skip: Int
    userID: ID
    after: String
    orderBy: CommentOrderByInput
  ): [Comment!]!
  users(query: String, first: Int, skip: Int, after: String): [User!]!
  node(id: ID!): Node
}

type Mutation {
 
  logout: String

  createVote(data: CreateVoteInput!): CreateVoteMutationResponse!

  createCategory(data: CreateCategoryInput!): CreateCategoryMutationResponse!
  updateCategory(data: UpdateCategoryInput!): UpdateCategoryMutationResponse!
  deleteCategory(data: DeleteCategoryInput!): DeleteCategoryMutationResponse!

  createUser(data: CreateUserInput!): CreateUserMutationResponse!
  updateUser(data: UpdateUserInput!): UpdateUserMutationResponse!
  deleteUser(data: DeleteUserInput!): DeleteUserMutationResponse!
  loginUser(data: LoginUserInput!): LoginUserMutationResponse!
  
  createPost(data: CreatePostInput!): CreatePostMutationResponse!
  updatePost(data: UpdatePostInput!): UpdatePostMutationResponse!
  deletePost(data: DeletePostInput!): DeletePostMutationResponse!

  createComment(data: CreateCommentInput!): CreateCommentMutationResponse!
  updateComment(data: UpdateCommentInput!): UpdateCommentMutationResponse!
  deleteComment(data: DeleteCommentInput!): DeleteCommentMutationResponse!
}

interface Node {
  id: ID!
}

type Vote implements Node {
  id: ID!
  post: Post!
  user: User!
}

type Category implements Node {
  updatedAt: String!
  createdAt: String!
  id: ID!
  name: String!
  posts: [Post!]!
}

type Post implements Node {
  updatedAt: String!
  createdAt: String!
  id: ID!
  category: Category!
  title: String!
  text: String
  author: User!
  comments: [Comment!]!
  votes: [Vote!]!
}

type User implements Node {
  id: ID!
  updatedAt: String!
  createdAt: String!
  email: String!
  username: String!
  password: String!
  posts: [Post!]!
  comments: [Comment!]!
  votes: [Vote!]!
}

type Comment implements Node {
  id: ID!
  updatedAt: String!
  createdAt: String!
  body: String!
  post: Post!
  createdBy: User!
}

### VOTE ###
input CreateVoteInput {
  postID: ID!
  commentID: ID
}

# SUBREDDITS
input CreateCategoryInput {
  name: String!
}
input UpdateCategoryInput {
  name: String!
  categoryID: ID!
}
input DeleteCategoryInput {
   categoryID: ID!
}

# POSTS
input CreatePostInput {
  categoryID: ID!
  title: String!
  text: String
}
input UpdatePostInput {
  postID: ID!
  text: String
  title: String
}
input DeletePostInput {
  postID: ID!
}

# COMMENTS
input CreateCommentInput {
  postID: ID!
  body: String!
}
input UpdateCommentInput {
  postID: ID!
  commentID: ID!
  body: String!
}
input DeleteCommentInput {
  postID: ID!
  commentID: ID!
}

#  USERS
input CreateUserInput {
  username: String!
  email: String!
  password: String!
}
input UpdateUserInput {
  userID: ID!
  password: String
  username: String
  email: String
}
input DeleteUserInput {
  userID: ID!
}
input LoginUserInput {
  email: String!
  password: String!
}


### MUTATION RESPONSES

## USERS
type CreateUserMutationResponse implements MutationResponse {
  code: String!
  success: Boolean!
  message: String!
  accessToken: String
  user: User
}
type UpdateUserMutationResponse implements MutationResponse {
  code: String!
  success: Boolean!
  message: String!
  user: User
}
type DeleteUserMutationResponse implements MutationResponse {
  code: String!
  success: Boolean!
  message: String!
}
type LoginUserMutationResponse implements MutationResponse {
  code: String!
  success: Boolean!
  message: String!
  accessToken: String
  user: User
}

## SUBREDDITS
type CreateCategoryMutationResponse implements MutationResponse {
  code: String!
  success: Boolean!
  message: String!
  category: Category!
}
type UpdateCategoryMutationResponse implements MutationResponse {
  code: String!
  success: Boolean!
  message: String!
  category: Category
}
type DeleteCategoryMutationResponse implements MutationResponse {
  code: String!
  success: Boolean!
  message: String!
  category: Category
}

## VOTING
type CreateVoteMutationResponse implements MutationResponse {
  code: String!
  success: Boolean!
  message: String!
  vote: Vote!
}

## POSTS
type CreatePostMutationResponse implements MutationResponse {
  code: String!
  success: Boolean!
  message: String!
  post: Post!
}
type UpdatePostMutationResponse implements MutationResponse {
  code: String!
  success: Boolean!
  message: String!
  post: Post!
}
type DeletePostMutationResponse implements MutationResponse {
  code: String!
  success: Boolean!
  message: String!
}

## COMMENTS
type CreateCommentMutationResponse implements MutationResponse {
  code: String!
  success: Boolean!
  message: String!
  comment: Comment!
}
type UpdateCommentMutationResponse implements MutationResponse {
  code: String!
  success: Boolean!
  message: String!
  comment: Comment!
}
type DeleteCommentMutationResponse implements MutationResponse {
  code: String!
  success: Boolean!
  message: String!
  comment: Comment!
}

# MUTATION RESPONSE
interface MutationResponse {
  code: String!
  success: Boolean!
  message: String!
}

### SUBSCRIPTIONS
type PostSubscriptionPayload {
  mutation: MutationType
  node: Post
}

type CommentSubscriptionPayload {
  mutation: MutationType
  node: Comment
}

type Subscription {
  post(postID: ID, categoryID: ID): PostSubscriptionPayload
  comment(postID: ID): CommentSubscriptionPayload
}

enum PostOrderByInput {
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

enum CommentOrderByInput {
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

enum Role {
  USER
  ADMIN
  MODERATOR
}

enum MutationType {
  CREATED
  UPDATED
  DELETED
}
