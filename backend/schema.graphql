type Query {
  categories(query: String): [Category!]!
  currentUser: User!
  users(query: String, first: Int, skip: Int, after: String): [User!]!
  post(postID: ID!): Post!
  posts(
    query: String
    first: Int
    skip: Int
    after: String
    orderBy: PostOrderByInput
  ): [Post!]!
  message(chatID: ID, userID: ID): Message!
  messages(chatID: ID, userID: ID): [Message!]!
  comment(commentID: ID!): Comment!
  comments(
    query: String
    first: Int
    skip: Int
    after: String
    orderBy: CommentOrderByInput
  ): [Comment!]!
  votes(postID: ID): [Vote!]!
  node(id: ID!, createdAt: String!, updatedAt: String!): Node
}
type Mutation {
  createUser(data: CreateUserInput!): CreateUserMutationResponse!
  loginUser(data: LoginUserInput!): LoginUserMutationResponse!
  updateUser(data: UpdateUserInput!): UpdateUserMutationResponse!
  deleteUser: DeleteUserMutationResponse!
  createCategory(data: CreateCategoryInput!): CreateCategoryMutationResponse!
  createChat(data: CreateChatInput!): CreateChatMutationResponse!
  createPost(data: CreatePostInput!): CreatePostMutationResponse!
  updatePost(data: UpdatePostInput!): UpdatePostMutationResponse!
  deletePost(data: DeletePostInput!): DeletePostMutationResponse!
  likePost(data: LikeInput!): LikePostMutationResponse!
  createComment(data: CreateCommentInput!): CreateCommentMutationResponse!
  updateComment(data: UpdateCommentInput!): UpdateCommentMutationResponse!
  deleteComment(data: DeleteCommentInput!): DeleteCommentMutationResponse!
}

interface Node {
  id: ID!
}

###### KEY TYPES ###############

type Category implements Node {
  updatedAt: String!
  createdAt: String!
  id: ID!
  name: String!
  posts: [Post!]!
  Chat: [Chat!]!
}
type Chat implements Node {
  id: ID!
  createdAt: String!
  updatedAt: String!
  users: [User!]!
  messages: [Message!]!
}
type Message implements Node {
  id: ID!
  categoryID: ID!
  chat: Chat!
  user: User!
  text: String!
}
type User implements Node {
  id: ID!
  role: Role!
  updatedAt: String!
  createdAt: String!
  messages: [Message!]!
  friends: [User!]!
  email: String!
  username: String!
  password: String!
  posts: [Post!]!
  comments: [Comment!]!
  likes: [Like!]!
}
type Like implements Node {
  id: ID!
  user: User!
  comment: Comment
  post: Post
}
type Post implements Node {
  updatedAt: String!
  createdAt: String!
  id: ID!
  category: Category!
  title: String!
  text: String
  author: User!
  comments: [Comment!]!
  likes: [Like!]!
}
type Comment implements Node {
  id: ID!
  updatedAt: String!
  createdAt: String!
  body: String!
  post: Post!
  likes: [Like!]!
  createdBy: User!
}

enum Role {
  ADMIN
  USER
}

######## INPUTS ###########

input LikeInput {
  chatID: ID
  messageID: ID
  postID: ID
  commentID: ID
}
input MessageInput {
  chatID: ID
  categoryID: ID
  userID: ID
  message: String
}
input CategoryInput {
  categoryID: ID
  name: String
}
input PostInput {
  postID: ID
  categoryID: ID
  title: String
  text: String
}
input CommentInput {
  commentID: ID
  postID: ID
  body: String
}
input UserInput {
  username: String
  email: String
  password: String
}

########## MUTATION-RESPONSE ############

type CreateUserMutationResponse implements MutationResponse {
  code: String!
  success: Boolean!
  message: String!
}
type UpdateUserMutationResponse implements MutationResponse {
  code: String!
  success: Boolean!
  message: String!
  user: User
}
type DeleteUserMutationResponse implements MutationResponse {
  code: String!
  success: Boolean!
  message: String!
  user: User
}
type LoginUserMutationResponse implements MutationResponse {
  code: String!
  success: Boolean!
  message: String!
  accessToken: String
  user: User
}
type CreateCategoryMutationResponse implements MutationResponse {
  code: String!
  success: Boolean!
  message: String!
}
type LikePostMutationResponse implements MutationResponse {
  code: String!
  success: Boolean!
  message: String!
  user: User
  post: Post
}
type LikeCommentMutationResponse implements MutationResponse {
  code: String!
  success: Boolean!
  message: String!
  user: User
  comment: Comment
}

type CreatePostMutationResponse implements MutationResponse {
  code: String!
  success: Boolean!
  message: String!
}
type UpdatePostMutationResponse implements MutationResponse {
  code: String!
  success: Boolean!
  message: String!
  post: Post
}
type DeletePostMutationResponse implements MutationResponse {
  code: String!
  success: Boolean!
  message: String!
  post: Post
}
type CreateCommentMutationResponse implements MutationResponse {
  code: String!
  success: Boolean!
  message: String!
}
type UpdateCommentMutationResponse implements MutationResponse {
  code: String!
  success: Boolean!
  message: String!
  comment: Comment
}
type DeleteCommentMutationResponse implements MutationResponse {
  code: String!
  success: Boolean!
  message: String!
  comment: Comment
}
interface MutationResponse {
  code: String!
  success: Boolean!
  message: String!
}

########### SUBSCRIPTIONS ############

type PostSubscriptionPayload {
  mutation: MutationType
  node: Post
}

type CommentSubscriptionPayload {
  mutation: MutationType
  node: Comment
}

type MessageSubscriptionPayload {
  mutation: MutationType
  node: Message
}

type Subscription {
  postAdded(postID: ID, categoryID: ID): PostSubscriptionPayload
  commentAdded(postID: ID): CommentSubscriptionPayload
  messageAdded(chatID: ID, userID: ID): MessageSubscriptionPayload
}

enum PostOrderByInput {
  updatedAt_ASC
  updatedAt_DESC
  liked_ASC
  liked_DESC
  createdAt_ASC
  createdAt_DESC
}

enum CommentOrderByInput {
  updatedAt_ASC
  updatedAt_DESC
  liked_ASC
  liked_DESC
  createdAt_ASC
  createdAt_DESC
}

enum MutationType {
  CREATED
  UPDATED
  DELETED
  LIKED
}
